<?php

namespace ContainerZGPxu85;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCompetencesAcquisesControllerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'App\Controller\CompetencesAcquisesController' shared autowired service.
     *
     * @return \App\Controller\CompetencesAcquisesController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'\\vendor\\symfony\\framework-bundle\\Controller\\AbstractController.php';
        include_once \dirname(__DIR__, 4).'\\src\\Controller\\CompetencesAcquisesController.php';

        $container->services['App\\Controller\\CompetencesAcquisesController'] = $instance = new \App\Controller\CompetencesAcquisesController(($container->privates['App\\Repository\\PromoRepository'] ?? $container->load('getPromoRepositoryService')), ($container->privates['App\\Repository\\UtilisateurRepository'] ?? $container->load('getUtilisateurRepositoryService')), ($container->services['doctrine.orm.default_entity_manager'] ?? $container->getDoctrine_Orm_DefaultEntityManagerService()), ($container->privates['App\\Repository\\ApprenantRepository'] ?? $container->load('getApprenantRepositoryService')), ($container->privates['App\\Repository\\CompetencesValidesRepository'] ?? $container->load('getCompetencesValidesRepositoryService')), ($container->privates['App\\Repository\\BriefApprenantRepository'] ?? $container->load('getBriefApprenantRepositoryService')), ($container->privates['App\\Repository\\ApprenantLivrablePartielRepository'] ?? $container->load('getApprenantLivrablePartielRepositoryService')));

        $instance->setContainer(($container->privates['.service_locator.g9CqTPp'] ?? $container->load('get_ServiceLocator_G9CqTPpService'))->withContext('App\\Controller\\CompetencesAcquisesController', $container));

        return $instance;
    }
}
